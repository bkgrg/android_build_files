### Build Linageos##################################################

# Setting build environment ########################################

#1. Configure platform-tools
cd ~
wget https://dl.google.com/android/repository/platform-tools-latest-linux.zip
unzip platform-tools-latest-linux.zip -d ~
cat >> ~/.profile << EOF

if [ -d "\$HOME/platform-tools" ] ; then
    PATH="\$HOME/platform-tools:\$PATH"
fi
EOF
source ~/.profile

#2. Install required packages
sudo apt-get install adb bc bison build-essential curl flex gcc-multilib git git-core git-lfs gnupg g++-multilib libc6-dev-i386 libgl1-mesa-dev libxml2-utils libx11-dev lib32z1-dev python-is-python3 repo xsltproc x11proto-core-dev unzip wget zip zlib1g-dev -y

wget http://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.4-2_amd64.deb && sudo dpkg -i libtinfo5_6.4-2_amd64.deb && rm -f libtinfo5_6.4-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.4-2_amd64.deb && sudo dpkg -i libncurses5_6.4-2_amd64.deb && rm -f libncurses5_6.4-2_amd64.deb

#6. Configure ccache
sudo mkdir /mnt/ccache
mkdir /home/bkgrg/.cache/ccache
sudo mount --bind /home/bkgrg/.cache/ccache /mnt/ccache/
cat >> ~/.bashrc << EOF

USE_CCACHE=1
CCACHE_EXEC=/usr/bin/ccache
CCACHE_DIR=/mnt/ccache
ccache -M 75G
EOF
echo "/home/bkgrg/.cache/ccache /mnt/ccache none defaults,bind,users,noauto 0 0" | tee -a /etc/fstab
echo "mount /mnt/ccache" | tee -a ~/.profile
source ~/.profile

# Configure repo
mkdir -p ~/.bin
PATH="${HOME}/.bin:${PATH}"
curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
chmod a+rx ~/.bin/repo
curl https://storage.googleapis.com/git-repo-downloads/repo > /usr/bin/repo

#7. Configure git
git config --global user.email birju.vnit@gmail.com
git config --global user.name bkgrg
git lfs install

#8. Repo init Source
mkdir -p ~/android/lineage && cd ~/android/lineage
repo init -u https://github.com/LineageOS/android.git -b lineage-21.0 --git-lfs

#9. Add repo entry for Device Specific Codes
cd ~/android/lineage
mkdir -p ~/android/lineage/.repo/local_manifests
cat >> ~/android/lineage/.repo/local_manifests/ruby.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
    <remote name="gitlab" fetch="https://gitlab.com" /> 
    <project name="wodanesdag/android_device_xiaomi_ruby" path="device/xiaomi/ruby" remote="github" revision="14.0" />
    <project name="wodanesdag/android_device_xiaomi_miuicamera-ruby" path="device/xiaomi/miuicamera-ruby" remote="github" revision="main" />
    <project name="xiaomi-mediatek-devs/android_device_mediatek_sepolicy_vndr" path="device/mediatek/sepolicy_vndr" remote="github" revision="lineage-21" />
    <project name="xiaomi-mediatek-devs/android_hardware_xiaomi" path="hardware/xiaomi" remote="github" revision="lineage-21" />
    <project name="xiaomi-mediatek-devs/android_hardware_mediatek" path="hardware/mediatek" remote="github" revision="lineage-21" />
    <project name="wodanesdag/android_kernel_xiaomi_mt6877" path="kernel/xiaomi/mt6877" remote="github" revision="13.0-ksu" />
    <project name="wodanesdag/android_vendor_xiaomi_ruby" path="vendor/xiaomi/ruby" remote="github" revision="14.0" />
    <project name="wodanesdag/android_vendor_xiaomi_miuicamera-ruby" path="vendor/xiaomi/miuicamera-ruby" remote="github" revision="udc" />
    <project name="MindTheGapps/vendor_gapps" path="vendor/gapps" remote="gitlab" revision="upsilon" />
</manifest>
EOF

#10. Downloading Source & Device Specific Codes
repo sync -c -j$(nproc --all) -f --force-sync --no-clone-bundle --no-tags

#11. Clone tools for extracting Vendor Blobs
git clone https://github.com/LineageOS/android_tools_extract-utils -b lineage-21.0 ~/android/tools/extract-utils
git clone https://github.com/LineageOS/android_prebuilts_extract-tools -b lineage-21.0 ~/android/prebuilts/extract-tools
cd ~
git clone https://github.com/AndroidDumps/dumpyara
cd dumpyara
bash setup.sh
bash dumpyara.sh ./zipname.zip

#12. Extract Vendor Blobs
cd ~/android
cp ./lineage/device/xiaomi/ruby/extract-files.sh ./tools/extract-utils/
cd ~/android/lineage/device/xiaomi/ruby
bash extract-files.sh /path/to/dump/zipname/

#13. Generate Keys
cd ~/android/lineage
subject='/C=IN/ST=Tamilnadu/L=Chennai View/O=/OU=/CN=bkgrg/emailAddress=birju.vnit@gmail.com'
mkdir ~/.android-certs
for cert in bluetooth cyngn-app media networkstack platform releasekey sdk_sandbox shared testcert testkey verity; do \
    ./development/tools/make_key ~/.android-certs/$cert "$subject"; \
done
cp ./development/tools/make_key ~/.android-certs/
sed -i 's|2048|4096|g' ~/.android-certs/make_key
mkdir -p ~/android/lineage/vendor/extra
cp -r ~/.android-certs ~/android/lineage/vendor/extra/keys
echo "PRODUCT_DEFAULT_DEV_CERTIFICATE := vendor/extra/keys/releasekey" > ~/android/lineage/vendor/extra/product.mk

#13. Building ROM
cd ~/android/lineage
source build/envsetup.sh
breakfast lineage_ruby-eng
croot
brunch lineage_ruby-eng -j$(nproc --all) |tee buildlog.txt
cd $OUT
mka target-files-package otatools -j$(nproc --all) |tee buildlog.txt


#14. Check logcats
adb shell su -c dmesg > dmesg.log
adb logcat -b all > logcat.txt
adb logcat -db radio > radio.txt

#15. Build errors
Check for "msg='avc:  denied"
