### Build Linageos##################################################

# Setting build environment ########################################

#1. Configure platform-tools
cd ~
wget https://dl.google.com/android/repository/platform-tools-latest-linux.zip && unzip platform-tools-latest-linux.zip -d ~ && rm -f platform-tools-latest-linux.zip
cat >> ~/.profile << EOF

if [ -d "\$HOME/platform-tools" ] ; then
    PATH="\$HOME/platform-tools:\$PATH"
fi
EOF
source ~/.profile

#2. Install required packages
sudo apt update -y && sudo apt-get install adb bc bison build-essential ccache curl fastboot flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush repo rsync schedtool squashfs-tools xsltproc zip zlib1g-dev -y

wget http://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.4-2_amd64.deb && sudo dpkg -i libtinfo5_6.4-2_amd64.deb && rm -f libtinfo5_6.4-2_amd64.deb
wget http://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.4-2_amd64.deb && sudo dpkg -i libncurses5_6.4-2_amd64.deb && rm -f libncurses5_6.4-2_amd64.deb

#6. Configure ccache (optional to speed up subsequent builds)
sudo mkdir /mnt/ccache
mkdir /home/bkgrg/.cache/ccache
sudo mount --bind /home/bkgrg/.cache/ccache /mnt/ccache
cat >> ~/.bashrc << EOF

USE_CCACHE=1
CCACHE_EXEC=/usr/bin/ccache
CCACHE_DIR=/mnt/ccache
ccache -M 75G
EOF
sudo echo "/home/bkgrg/.cache/ccache /mnt/ccache none defaults,bind,users,noauto 0 0" | tee -a /etc/fstab
echo "mount /mnt/ccache" | tee -a ~/.profile
source ~/.profile

#7. Configure git
git config --global user.email birju.vnit@gmail.com
git config --global user.name bkgrg
git lfs install

#8. Repo init Source
mkdir -p ~/android && cd ~/android
repo init -u https://github.com/LineageOS/android.git -b lineage-21.0 --git-lfs
repo forall -vc "git fsck --all"

#9. Add repo entry for Device Specific Codes
cd ~/android
mkdir -p ~/android/.repo/local_manifests
cat >> ~/android/.repo/local_manifests/roomservice.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>

  <project name="rubyx-devs/device_mediatek_sepolicy_vndr" path="device/mediatek/sepolicy_vndr" remote="github" revision="lineage-22.2" />
  <project name="rubyx-devs/device_xiaomi_rubyx" path="device/xiaomi/rubyx" remote="github" revision="lineage-22.2" />
  <project name="rubyx-devs/hardware_mediatek" path="hardware/mediatek" remote="github" revision="lineage-22.2" />
  <project name="rubyx-devs/hardware_xiaomi" path="hardware/xiaomi" remote="github" revision="lineage-22.2" />
  <project name="rubyx-devs/kernel_xiaomi_mt6877" path="kernel/xiaomi/mt6877" remote="github" revision="lineage-22.0" />
  <project name="rubyx-devs/vendor_xiaomi_rubyx" path="vendor/xiaomi/rubyx" remote="github" revision="lineage-22.2" />

</manifest>
EOF

#10. Downloading Source & Device Specific Codes
repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags --force-remove-dirty
repo forall -vc "git fsck --all"

#11. Clone tools for extracting Vendor Blobs
git clone https://github.com/LineageOS/android_tools_extract-utils -b lineage-21.0 ~/android/tools/extract-utils
git clone https://github.com/LineageOS/android_prebuilts_extract-tools -b lineage-21.0 ~/android/prebuilts/extract-tools
cd ~
git clone https://github.com/AndroidDumps/dumpyara
cd dumpyara
bash setup.sh
bash dumpyara.sh ./zipname.zip

#12. Extract Vendor Blobs
cd ~/android
cp ./lineage/device/xiaomi/ruby/extract-files.sh ./tools/extract-utils/
cd ~/android/lineage/device/xiaomi/ruby
bash extract-files.sh /path/to/dump/zipname/

#13. Generate Keys
cd ~/android/lineage
source build/envsetup.sh
croot
subject='/C=IN/ST=Tamilnadu/L=Chennai/O=bkgrg/OU=bkgrg/CN=bkgrg/emailAddress=birju.vnit@gmail.com'

for cert in bluetooth cyngn-app media networkstack platform releasekey sdk_sandbox shared testcert testkey verifiedboot verity; do \
    ./development/tools/make_key ~/.android-certs/$cert "$subject"; \
done

cp ./development/tools/make_key ~/.android-certs/
sed -i 's|2048|4096|g' ~/.android-certs/make_key

for apex in com.android.adbd com.android.adservices com.android.adservices.api com.android.appsearch com.android.art com.android.bluetooth com.android.btservices com.android.cellbroadcast com.android.compos com.android.configinfrastructure com.android.connectivity.resources com.android.conscrypt com.android.devicelock com.android.extservices com.android.hardware.wifi com.android.healthfitness com.android.hotspot2.osulogin com.android.i18n com.android.ipsec com.android.media com.android.media.swcodec com.android.mediaprovider com.android.nearby.halfsheet com.android.networkstack.tethering com.android.neuralnetworks com.android.ondevicepersonalization com.android.os.statsd com.android.permission com.android.resolv com.android.rkpd com.android.runtime com.android.safetycenter.resources com.android.scheduling com.android.sdkext com.android.support.apexer com.android.telephony com.android.telephonymodules com.android.tethering com.android.tzdata com.android.uwb com.android.uwb.resources com.android.virt com.android.vndk.current com.android.wifi com.android.wifi.dialog com.android.wifi.resources com.google.pixel.vibrator.hal com.qorvo.uwb; do \
    subject='/C=IN/ST=Tamilnadu/L=Chennai/O=bkgrg/OU=bkgrg/CN=bkgrg/emailAddress=birju.vnit@gmail.com'; \
    ~/.android-certs/make_key ~/.android-certs/$apex "$subject"; \
    openssl pkcs8 -in ~/.android-certs/$apex.pk8 -inform DER -nocrypt -out ~/.android-certs/$apex.pem; \
done

cd ~/android/lineage
mkdir -p vendor/certs
cp --no-clobber ../../.android-certs/* vendor/certs

#13. Building ROM
cd ~/android/lineage
export LINEAGE_DEV_CERTIFICATE=vendor/certs/releasekey
export LINEAGE_VERITY_CERTIFICATE=vendor/certs/verity
export USE_CCACHE=1
source build/envsetup.sh && lunch lineage_ruby-eng && croot && num_procs=$(nproc) && make -j$((num_procs - 1)) bacon 2&>1 |tee buildlog.txt


#14. Building signed copy
mka target-files-package otatools -j$(nproc --all) |tee buildlog.txt
croot
./build/tools/releasetools/sign_target_files_apks -o -d ~/.android-certs \
	$OUT/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip \
	signed-target_files.zip
./build/tools/releasetools/ota_from_target_files -k ~/.android-certs/releasekey 
        --block --backup=true \
        signed-target_files.zip \
        signed-ota_update.zip

#15. 
fastboot flash dtbo dtbo.img
fastboot flash vbmeta vbmeta.img
fastboot wipe-super super_empty.img
fastboot flash boot boot.img
fastboot reboot recovery
adb -d sideload xxx.zip

#14. Check logcats
adb root
adb shell su -c dmesg > dmesg.log
adb logcat -b all > logcat.txt
adb logcat -b kernel > kernel.txt
adb logcat -db radio > radio.txt
adb shell su root dmesg | grep 'avc: ' > dmesgavc.log
adb pull /sys/fs/selinux/policy
adb logcat -b events -d | audit2allow -p policy

#15. Build errors
Check for "msg='avc:  denied"
